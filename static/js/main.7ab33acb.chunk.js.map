{"version":3,"sources":["Components/atom.tsx","Components/CreateToDo.tsx","Components/ToDo.tsx","ToDoList.tsx","App.tsx","index.tsx","theme.ts"],"names":["catergories","persistAtom","recoilPersist","CategoryState","atom","key","default","To_Do","AdditionalCategoryState","effects_UNSTABLE","toDoState","toDoSelector","selector","get","todos","category","filter","toDo","CreateToDo","useForm","register","handleSubmit","setValue","useRecoilState","setToDos","useRecoilValue","onSubmit","data","prevTodo","text","id","Date","now","required","minLength","value","message","placeholder","type","ToDo","useSetRecoilState","Acats","onClick","event","name","currentTarget","targetIdx","findIndex","todo","newTodo","newTodos","splice","Doing","Done","map","cat","newCats","ToDoList","CurrToDoAry","setCat","additionalCats","setAdditionalCats","errors","formState","onInput","console","log","prevCats","Cats","GlobalStyle","createGlobalStyle","props","theme","bgColor","textColor","App","ReactDOM","render","StrictMode","accentColor","cardBgColor","document","getElementById"],"mappings":"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","file":"static/js/main.7ab33acb.chunk.js","sourcesContent":["import {atom, selector} from 'recoil';\r\nimport { recoilPersist } from 'recoil-persist';\r\n\r\nconst {persistAtom} = recoilPersist();\r\n\r\nexport enum catergories {\r\n    \"To_Do\" = \"To_Do\",\r\n    \"Doing\" = \"Doing\",\r\n    \"Done\" = \"Done\",\r\n};\r\n\r\nexport interface IToDo {\r\n    text: string;\r\n    id: number;\r\n    category: catergories;\r\n};\r\n\r\nexport interface IaCats { //interface additional categories\r\n    newCats: string;\r\n    id: number;\r\n};\r\n\r\nexport const CategoryState = atom<catergories>({\r\n    key: 'Category',\r\n    default: catergories.To_Do\r\n});\r\n\r\nexport const AdditionalCategoryState = atom<IaCats[]>({\r\n    key: 'AdditionalCategory',\r\n    default: [],\r\n    effects_UNSTABLE: [persistAtom]\r\n});\r\n\r\nexport const toDoState = atom<IToDo[]>({\r\n    key: 'toDos',\r\n    default: [],\r\n    effects_UNSTABLE: [persistAtom]\r\n});\r\n\r\nexport const toDoSelector = selector({\r\n    key: 'toDoSelector',\r\n    get: ({get}) => {\r\n        const todos = get(toDoState);\r\n        const category = get(CategoryState);\r\n        return todos.filter(toDo => toDo.category === category);\r\n    }\r\n});","import {useForm} from 'react-hook-form';\r\nimport {useRecoilState, useRecoilValue} from 'recoil';\r\nimport { toDoState, CategoryState } from './atom';\r\n\r\ninterface ItodoForm {\r\n    toDo: string;\r\n}\r\n\r\nfunction CreateToDo() {\r\n    const {register, handleSubmit, setValue } = useForm<ItodoForm>();\r\n    const [ToDos, setToDos] = useRecoilState(toDoState);\r\n    const category = useRecoilValue(CategoryState);\r\n    const onValid = (data:ItodoForm) => {\r\n        setToDos(prevTodo => [{text:data.toDo, id:Date.now(), category},...prevTodo]);\r\n        setValue('toDo', '');\r\n    };\r\n    return (\r\n        <div>\r\n            <form onSubmit={handleSubmit(onValid)}>\r\n                <input {...register(\"toDo\", {required:\"ToDo를 적어주세요!\",minLength:{value: 1, message:\"두자리 이상 적어주세요!\"}})}\r\n                placeholder='ToDo 적기!' />\r\n                <button type='submit'>추가</button>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CreateToDo;\r\n","import React from \"react\";\r\nimport { useRecoilValue, useSetRecoilState } from \"recoil\";\r\nimport { IToDo, toDoState,catergories, AdditionalCategoryState } from \"./atom\";\r\n\r\nfunction ToDo({text, category, id}:IToDo) {\r\n    const setToDos = useSetRecoilState(toDoState);\r\n    const Acats = useRecoilValue(AdditionalCategoryState);\r\n    const onClick = (event:React.MouseEvent<HTMLButtonElement>) => {\r\n        const {currentTarget: {name}} = event;\r\n        setToDos(prevTodo => {\r\n           const targetIdx = prevTodo.findIndex(todo => todo.id === id);\r\n           const newTodo:IToDo = {text,id, category: name as catergories};\r\n           const newTodos = [...prevTodo];\r\n           newTodos.splice(targetIdx, 1, newTodo);\r\n           return newTodos;\r\n        });\r\n    };\r\n\r\n    return (\r\n        <li>\r\n            {text}\r\n            {category !== catergories.Doing && <button name={catergories.Doing} onClick={onClick}>Doing</button>}\r\n            {category !== catergories.To_Do && <button name={catergories.To_Do} onClick={onClick}>To_Do</button>}\r\n            {category !== catergories.Done && <button name={catergories.Done} onClick={onClick}>Done</button>}\r\n            {Acats.map(cat => {\r\n                return category !== cat.newCats && <button key={cat.id} name={cat.newCats} onClick={onClick}>{cat.newCats}</button>\r\n            })}\r\n        </li>\r\n    )\r\n}\r\n\r\nexport default ToDo;\r\n","import React from 'react';\r\nimport { useForm } from 'react-hook-form';\r\nimport {useRecoilState, useRecoilValue} from 'recoil';\r\nimport {toDoState,catergories, toDoSelector, CategoryState ,AdditionalCategoryState} from './Components/atom';\r\nimport CreateToDo from './Components/CreateToDo'\r\nimport ToDo from './Components/ToDo';\r\n\r\ninterface ICatsForm {\r\n    Cats: string;\r\n}\r\n\r\nfunction ToDoList() {\r\n    const CurrToDoAry =  useRecoilValue(toDoSelector);\r\n    const [cat,setCat] = useRecoilState(CategoryState);\r\n    const [additionalCats,setAdditionalCats] = useRecoilState(AdditionalCategoryState);\r\n    const {register, handleSubmit, setValue, formState:{errors} } = useForm<ICatsForm>();\r\n    const onInput = (event:React.FormEvent<HTMLSelectElement>) => {\r\n        const {currentTarget: {value}} = event;\r\n        console.log(value);\r\n        setCat(value as catergories);\r\n    };\r\n    const onSubmit = (data:ICatsForm) => {\r\n        console.log(data);\r\n        setAdditionalCats(prevCats => [{newCats:data.Cats,id:Date.now()},...prevCats]);\r\n        setValue('Cats', '');\r\n    };\r\n    return (\r\n        <div>\r\n            <h1>To Dos</h1>\r\n            <hr />\r\n            <form>\r\n                <select onInput={onInput}>\r\n                    <option value={catergories.To_Do}>To Do</option>\r\n                    <option value={catergories.Doing}>Doing</option>\r\n                    <option value={catergories.Done}>Done</option>\r\n                    {additionalCats.map(cat => <option key={cat.id} value={cat.newCats}>{cat.newCats}</option>)}\r\n                </select>\r\n            </form>\r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n                <input {...register('Cats',{required:'뭔가 입력해 주세요!'})} placeholder='Make New Category!' />\r\n                <button type='submit'>Make new one!</button>\r\n            </form>\r\n            {errors?.Cats?.message}\r\n            <CreateToDo />\r\n            {CurrToDoAry?.map(toDo => <ToDo key={toDo.id} {...toDo} />)}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ToDoList;\r\n","import {createGlobalStyle} from \"styled-components\";\nimport ToDoList from \"./ToDoList\";\n\nconst GlobalStyle = createGlobalStyle`\n  @import url('https://fonts.googleapis.com/css2?family=Readex+Pro&display=swap');\n  html, body, div, span, applet, object, iframe,\n  h1, h2, h3, h4, h5, h6, p, blockquote, pre,\n  a, abbr, acronym, address, big, cite, code,\n  del, dfn, em, img, ins, kbd, q, s, samp,\n  small, strike, strong, sub, sup, tt, var,\n  b, u, i, center,\n  dl, dt, dd, menu, ol, ul, li,\n  fieldset, form, label, legend,\n  table, caption, tbody, tfoot, thead, tr, th, td,\n  article, aside, canvas, details, embed,\n  figure, figcaption, footer, header, hgroup,\n  main, menu, nav, output, ruby, section, summary,\n  time, mark, audio, video {\n    margin: 0;\n    padding: 0;\n    border: 0;\n    font-size: 100%;\n    font: inherit;\n    vertical-align: baseline;\n  }\n  /* HTML5 display-role reset for older browsers */\n  article, aside, details, figcaption, figure,\n  footer, header, hgroup, main, menu, nav, section {\n    display: block;\n  }\n  /* HTML5 hidden-attribute fix for newer browsers */\n  *[hidden] {\n      display: none;\n  }\n  body {\n    line-height: 1;\n  }\n  menu, ol, ul {\n    list-style: none;\n  }\n  blockquote, q {\n    quotes: none;\n  }\n  blockquote:before, blockquote:after,\n  q:before, q:after {\n    content: '';\n    content: none;\n  }\n  table {\n    border-collapse: collapse;\n    border-spacing: 0;\n  }\n  * {\n    box-sizing: border-box;\n  }\n  body {\n    font-family: 'Readex Pro', sans-serif;\n    background-color:${(props) => props.theme.bgColor};\n    color:${(props) => props.theme.textColor}\n  }\n  a {\n    text-decoration:none;\n    color: inherit;\n  }\n`;\n\nfunction App() {\n  return (\n    <>\n      <GlobalStyle/>\n      <ToDoList />\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {RecoilRoot} from 'recoil';\nimport { ThemeProvider } from 'styled-components';\nimport { Darktheme } from './theme';\n\nReactDOM.render(\n  <React.StrictMode>\n    <RecoilRoot>\n      <ThemeProvider theme={Darktheme}>\n        <App />\n      </ThemeProvider>\n    </RecoilRoot>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n","import { DefaultTheme } from 'styled-components';\r\n\r\nexport const Darktheme: DefaultTheme = {\r\n    bgColor: '#636e72',\r\n    textColor: 'white',\r\n    accentColor: '#2ecc71' ,\r\n    cardBgColor: '#2ecc71',  \r\n};\r\n\r\n\r\n"],"sourceRoot":""}